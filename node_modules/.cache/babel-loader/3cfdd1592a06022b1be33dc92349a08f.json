{"ast":null,"code":"import _construct from \"/Users/rahulgupta/Desktop/ecommerse/dealsfly/node_modules/@babel/runtime/helpers/esm/construct.js\";\nimport _inherits from \"/Users/rahulgupta/Desktop/ecommerse/dealsfly/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rahulgupta/Desktop/ecommerse/dealsfly/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createForOfIteratorHelper from \"/Users/rahulgupta/Desktop/ecommerse/dealsfly/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/rahulgupta/Desktop/ecommerse/dealsfly/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rahulgupta/Desktop/ecommerse/dealsfly/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport firebase from '@firebase/app-compat';\nimport { FirestoreError, Bytes, _isBase64Available, enableIndexedDbPersistence as _enableIndexedDbPersistence, enableMultiTabIndexedDbPersistence as _enableMultiTabIndexedDbPersistence, clearIndexedDbPersistence as _clearIndexedDbPersistence, _DatabaseId, _logWarn, connectFirestoreEmulator, enableNetwork as _enableNetwork, disableNetwork as _disableNetwork, _validateIsNotUsedTogether, waitForPendingWrites as _waitForPendingWrites, onSnapshotsInSync as _onSnapshotsInSync, collection as _collection, doc as _doc, collectionGroup as _collectionGroup, runTransaction as _runTransaction, ensureFirestoreConfigured, WriteBatch as WriteBatch$1, executeWrite, loadBundle as _loadBundle, namedQuery as _namedQuery, _cast, DocumentReference as DocumentReference$1, DocumentSnapshot as DocumentSnapshot$1, _DocumentKey, refEqual, setDoc, updateDoc, deleteDoc, onSnapshot as _onSnapshot, getDocFromCache, getDocFromServer, getDoc, snapshotEqual, query, where as _where, orderBy as _orderBy, limit as _limit, limitToLast as _limitToLast, startAt as _startAt, startAfter as _startAfter, endBefore as _endBefore, endAt as _endAt, queryEqual, getDocsFromCache, getDocsFromServer, getDocs, QuerySnapshot as QuerySnapshot$1, addDoc, AbstractUserDataWriter, setLogLevel as setLogLevel$1, QueryDocumentSnapshot as QueryDocumentSnapshot$1, _debugAssert, FieldPath as FieldPath$1, _FieldPath, serverTimestamp as _serverTimestamp, deleteField, arrayUnion as _arrayUnion, arrayRemove as _arrayRemove, increment as _increment, GeoPoint, Timestamp, CACHE_SIZE_UNLIMITED } from '@firebase/firestore';\nimport { getModularInstance } from '@firebase/util';\nimport { Component } from '@firebase/component';\nvar name = \"@firebase/firestore-compat\";\nvar version = \"0.1.22\";\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction validateSetOptions(methodName, options) {\n  if (options === undefined) {\n    return {\n      merge: false\n    };\n  }\n\n  if (options.mergeFields !== undefined && options.merge !== undefined) {\n    throw new FirestoreError('invalid-argument', \"Invalid options passed to function \".concat(methodName, \"(): You cannot \") + 'specify both \"merge\" and \"mergeFields\".');\n  }\n\n  return options;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Helper function to assert Uint8Array is available at runtime. */\n\n\nfunction assertUint8ArrayAvailable() {\n  if (typeof Uint8Array === 'undefined') {\n    throw new FirestoreError('unimplemented', 'Uint8Arrays are not available in this environment.');\n  }\n}\n/** Helper function to assert Base64 functions are available at runtime. */\n\n\nfunction assertBase64Available() {\n  if (!_isBase64Available()) {\n    throw new FirestoreError('unimplemented', 'Blobs are unavailable in Firestore in this environment.');\n  }\n}\n/** Immutable class holding a blob (binary data) */\n\n\nvar Blob = /*#__PURE__*/function () {\n  function Blob(_delegate) {\n    _classCallCheck(this, Blob);\n\n    this._delegate = _delegate;\n  }\n\n  _createClass(Blob, [{\n    key: \"toBase64\",\n    value: function toBase64() {\n      assertBase64Available();\n      return this._delegate.toBase64();\n    }\n  }, {\n    key: \"toUint8Array\",\n    value: function toUint8Array() {\n      assertUint8ArrayAvailable();\n      return this._delegate.toUint8Array();\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      return this._delegate.isEqual(other._delegate);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return 'Blob(base64: ' + this.toBase64() + ')';\n    }\n  }], [{\n    key: \"fromBase64String\",\n    value: function fromBase64String(base64) {\n      assertBase64Available();\n      return new Blob(Bytes.fromBase64String(base64));\n    }\n  }, {\n    key: \"fromUint8Array\",\n    value: function fromUint8Array(array) {\n      assertUint8ArrayAvailable();\n      return new Blob(Bytes.fromUint8Array(array));\n    }\n  }]);\n\n  return Blob;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isPartialObserver(obj) {\n  return implementsAnyMethods(obj, ['next', 'error', 'complete']);\n}\n/**\r\n * Returns true if obj is an object and contains at least one of the specified\r\n * methods.\r\n */\n\n\nfunction implementsAnyMethods(obj, methods) {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  var object = obj;\n\n  var _iterator = _createForOfIteratorHelper(methods),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var method = _step.value;\n\n      if (method in object && typeof object[method] === 'function') {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return false;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The persistence provider included with the full Firestore SDK.\r\n */\n\n\nvar IndexedDbPersistenceProvider = /*#__PURE__*/function () {\n  function IndexedDbPersistenceProvider() {\n    _classCallCheck(this, IndexedDbPersistenceProvider);\n  }\n\n  _createClass(IndexedDbPersistenceProvider, [{\n    key: \"enableIndexedDbPersistence\",\n    value: function enableIndexedDbPersistence(firestore, forceOwnership) {\n      return _enableIndexedDbPersistence(firestore._delegate, {\n        forceOwnership: forceOwnership\n      });\n    }\n  }, {\n    key: \"enableMultiTabIndexedDbPersistence\",\n    value: function enableMultiTabIndexedDbPersistence(firestore) {\n      return _enableMultiTabIndexedDbPersistence(firestore._delegate);\n    }\n  }, {\n    key: \"clearIndexedDbPersistence\",\n    value: function clearIndexedDbPersistence(firestore) {\n      return _clearIndexedDbPersistence(firestore._delegate);\n    }\n  }]);\n\n  return IndexedDbPersistenceProvider;\n}();\n/**\r\n * Compat class for Firestore. Exposes Firestore Legacy API, but delegates\r\n * to the functional API of firestore-exp.\r\n */\n\n\nvar Firestore = /*#__PURE__*/function () {\n  function Firestore(databaseIdOrApp, _delegate, _persistenceProvider) {\n    var _this = this;\n\n    _classCallCheck(this, Firestore);\n\n    this._delegate = _delegate;\n    this._persistenceProvider = _persistenceProvider;\n    this.INTERNAL = {\n      delete: function _delete() {\n        return _this.terminate();\n      }\n    };\n\n    if (!(databaseIdOrApp instanceof _DatabaseId)) {\n      this._appCompat = databaseIdOrApp;\n    }\n  }\n\n  _createClass(Firestore, [{\n    key: \"_databaseId\",\n    get: function get() {\n      return this._delegate._databaseId;\n    }\n  }, {\n    key: \"settings\",\n    value: function settings(settingsLiteral) {\n      var currentSettings = this._delegate._getSettings();\n\n      if (!settingsLiteral.merge && currentSettings.host !== settingsLiteral.host) {\n        _logWarn('You are overriding the original host. If you did not intend ' + 'to override your settings, use {merge: true}.');\n      }\n\n      if (settingsLiteral.merge) {\n        settingsLiteral = Object.assign(Object.assign({}, currentSettings), settingsLiteral); // Remove the property from the settings once the merge is completed\n\n        delete settingsLiteral.merge;\n      }\n\n      this._delegate._setSettings(settingsLiteral);\n    }\n  }, {\n    key: \"useEmulator\",\n    value: function useEmulator(host, port) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      connectFirestoreEmulator(this._delegate, host, port, options);\n    }\n  }, {\n    key: \"enableNetwork\",\n    value: function enableNetwork() {\n      return _enableNetwork(this._delegate);\n    }\n  }, {\n    key: \"disableNetwork\",\n    value: function disableNetwork() {\n      return _disableNetwork(this._delegate);\n    }\n  }, {\n    key: \"enablePersistence\",\n    value: function enablePersistence(settings) {\n      var synchronizeTabs = false;\n      var experimentalForceOwningTab = false;\n\n      if (settings) {\n        synchronizeTabs = !!settings.synchronizeTabs;\n        experimentalForceOwningTab = !!settings.experimentalForceOwningTab;\n\n        _validateIsNotUsedTogether('synchronizeTabs', synchronizeTabs, 'experimentalForceOwningTab', experimentalForceOwningTab);\n      }\n\n      return synchronizeTabs ? this._persistenceProvider.enableMultiTabIndexedDbPersistence(this) : this._persistenceProvider.enableIndexedDbPersistence(this, experimentalForceOwningTab);\n    }\n  }, {\n    key: \"clearPersistence\",\n    value: function clearPersistence() {\n      return this._persistenceProvider.clearIndexedDbPersistence(this);\n    }\n  }, {\n    key: \"terminate\",\n    value: function terminate() {\n      if (this._appCompat) {\n        this._appCompat._removeServiceInstance('firestore-compat');\n\n        this._appCompat._removeServiceInstance('firestore');\n      }\n\n      return this._delegate._delete();\n    }\n  }, {\n    key: \"waitForPendingWrites\",\n    value: function waitForPendingWrites() {\n      return _waitForPendingWrites(this._delegate);\n    }\n  }, {\n    key: \"onSnapshotsInSync\",\n    value: function onSnapshotsInSync(arg) {\n      return _onSnapshotsInSync(this._delegate, arg);\n    }\n  }, {\n    key: \"app\",\n    get: function get() {\n      if (!this._appCompat) {\n        throw new FirestoreError('failed-precondition', \"Firestore was not initialized using the Firebase SDK. 'app' is \" + 'not available');\n      }\n\n      return this._appCompat;\n    }\n  }, {\n    key: \"collection\",\n    value: function collection(pathString) {\n      try {\n        return new CollectionReference(this, _collection(this._delegate, pathString));\n      } catch (e) {\n        throw replaceFunctionName(e, 'collection()', 'Firestore.collection()');\n      }\n    }\n  }, {\n    key: \"doc\",\n    value: function doc(pathString) {\n      try {\n        return new DocumentReference(this, _doc(this._delegate, pathString));\n      } catch (e) {\n        throw replaceFunctionName(e, 'doc()', 'Firestore.doc()');\n      }\n    }\n  }, {\n    key: \"collectionGroup\",\n    value: function collectionGroup(collectionId) {\n      try {\n        return new Query(this, _collectionGroup(this._delegate, collectionId));\n      } catch (e) {\n        throw replaceFunctionName(e, 'collectionGroup()', 'Firestore.collectionGroup()');\n      }\n    }\n  }, {\n    key: \"runTransaction\",\n    value: function runTransaction(updateFunction) {\n      var _this2 = this;\n\n      return _runTransaction(this._delegate, function (transaction) {\n        return updateFunction(new Transaction(_this2, transaction));\n      });\n    }\n  }, {\n    key: \"batch\",\n    value: function batch() {\n      var _this3 = this;\n\n      ensureFirestoreConfigured(this._delegate);\n      return new WriteBatch(new WriteBatch$1(this._delegate, function (mutations) {\n        return executeWrite(_this3._delegate, mutations);\n      }));\n    }\n  }, {\n    key: \"loadBundle\",\n    value: function loadBundle(bundleData) {\n      return _loadBundle(this._delegate, bundleData);\n    }\n  }, {\n    key: \"namedQuery\",\n    value: function namedQuery(name) {\n      var _this4 = this;\n\n      return _namedQuery(this._delegate, name).then(function (expQuery) {\n        if (!expQuery) {\n          return null;\n        }\n\n        return new Query(_this4, // We can pass `expQuery` here directly since named queries don't have a UserDataConverter.\n        // Otherwise, we would have to create a new ExpQuery and pass the old UserDataConverter.\n        expQuery);\n      });\n    }\n  }]);\n\n  return Firestore;\n}();\n\nvar UserDataWriter = /*#__PURE__*/function (_AbstractUserDataWrit) {\n  _inherits(UserDataWriter, _AbstractUserDataWrit);\n\n  var _super = _createSuper(UserDataWriter);\n\n  function UserDataWriter(firestore) {\n    var _this5;\n\n    _classCallCheck(this, UserDataWriter);\n\n    _this5 = _super.call(this);\n    _this5.firestore = firestore;\n    return _this5;\n  }\n\n  _createClass(UserDataWriter, [{\n    key: \"convertBytes\",\n    value: function convertBytes(bytes) {\n      return new Blob(new Bytes(bytes));\n    }\n  }, {\n    key: \"convertReference\",\n    value: function convertReference(name) {\n      var key = this.convertDocumentKey(name, this.firestore._databaseId);\n      return DocumentReference.forKey(key, this.firestore,\n      /* converter= */\n      null);\n    }\n  }]);\n\n  return UserDataWriter;\n}(AbstractUserDataWriter);\n\nfunction setLogLevel(level) {\n  setLogLevel$1(level);\n}\n/**\r\n * A reference to a transaction.\r\n */\n\n\nvar Transaction = /*#__PURE__*/function () {\n  function Transaction(_firestore, _delegate) {\n    _classCallCheck(this, Transaction);\n\n    this._firestore = _firestore;\n    this._delegate = _delegate;\n    this._userDataWriter = new UserDataWriter(_firestore);\n  }\n\n  _createClass(Transaction, [{\n    key: \"get\",\n    value: function get(documentRef) {\n      var _this6 = this;\n\n      var ref = castReference(documentRef);\n      return this._delegate.get(ref).then(function (result) {\n        return new DocumentSnapshot(_this6._firestore, new DocumentSnapshot$1(_this6._firestore._delegate, _this6._userDataWriter, result._key, result._document, result.metadata, ref.converter));\n      });\n    }\n  }, {\n    key: \"set\",\n    value: function set(documentRef, data, options) {\n      var ref = castReference(documentRef);\n\n      if (options) {\n        validateSetOptions('Transaction.set', options);\n\n        this._delegate.set(ref, data, options);\n      } else {\n        this._delegate.set(ref, data);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"update\",\n    value: function update(documentRef, dataOrField, value) {\n      for (var _len = arguments.length, moreFieldsAndValues = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n        moreFieldsAndValues[_key - 3] = arguments[_key];\n      }\n\n      var ref = castReference(documentRef);\n\n      if (arguments.length === 2) {\n        this._delegate.update(ref, dataOrField);\n      } else {\n        var _this$_delegate;\n\n        (_this$_delegate = this._delegate).update.apply(_this$_delegate, [ref, dataOrField, value].concat(moreFieldsAndValues));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(documentRef) {\n      var ref = castReference(documentRef);\n\n      this._delegate.delete(ref);\n\n      return this;\n    }\n  }]);\n\n  return Transaction;\n}();\n\nvar WriteBatch = /*#__PURE__*/function () {\n  function WriteBatch(_delegate) {\n    _classCallCheck(this, WriteBatch);\n\n    this._delegate = _delegate;\n  }\n\n  _createClass(WriteBatch, [{\n    key: \"set\",\n    value: function set(documentRef, data, options) {\n      var ref = castReference(documentRef);\n\n      if (options) {\n        validateSetOptions('WriteBatch.set', options);\n\n        this._delegate.set(ref, data, options);\n      } else {\n        this._delegate.set(ref, data);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"update\",\n    value: function update(documentRef, dataOrField, value) {\n      for (var _len2 = arguments.length, moreFieldsAndValues = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n        moreFieldsAndValues[_key2 - 3] = arguments[_key2];\n      }\n\n      var ref = castReference(documentRef);\n\n      if (arguments.length === 2) {\n        this._delegate.update(ref, dataOrField);\n      } else {\n        var _this$_delegate2;\n\n        (_this$_delegate2 = this._delegate).update.apply(_this$_delegate2, [ref, dataOrField, value].concat(moreFieldsAndValues));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(documentRef) {\n      var ref = castReference(documentRef);\n\n      this._delegate.delete(ref);\n\n      return this;\n    }\n  }, {\n    key: \"commit\",\n    value: function commit() {\n      return this._delegate.commit();\n    }\n  }]);\n\n  return WriteBatch;\n}();\n/**\r\n * Wraps a `PublicFirestoreDataConverter` translating the types from the\r\n * experimental SDK into corresponding types from the Classic SDK before passing\r\n * them to the wrapped converter.\r\n */\n\n\nvar FirestoreDataConverter = /*#__PURE__*/function () {\n  function FirestoreDataConverter(_firestore, _userDataWriter, _delegate) {\n    _classCallCheck(this, FirestoreDataConverter);\n\n    this._firestore = _firestore;\n    this._userDataWriter = _userDataWriter;\n    this._delegate = _delegate;\n  }\n\n  _createClass(FirestoreDataConverter, [{\n    key: \"fromFirestore\",\n    value: function fromFirestore(snapshot, options) {\n      var expSnapshot = new QueryDocumentSnapshot$1(this._firestore._delegate, this._userDataWriter, snapshot._key, snapshot._document, snapshot.metadata,\n      /* converter= */\n      null);\n      return this._delegate.fromFirestore(new QueryDocumentSnapshot(this._firestore, expSnapshot), options !== null && options !== void 0 ? options : {});\n    }\n  }, {\n    key: \"toFirestore\",\n    value: function toFirestore(modelObject, options) {\n      if (!options) {\n        return this._delegate.toFirestore(modelObject);\n      } else {\n        return this._delegate.toFirestore(modelObject, options);\n      }\n    } // Use the same instance of `FirestoreDataConverter` for the given instances\n    // of `Firestore` and `PublicFirestoreDataConverter` so that isEqual() will\n    // compare equal for two objects created with the same converter instance.\n\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance(firestore, converter) {\n      var converterMapByFirestore = FirestoreDataConverter.INSTANCES;\n      var untypedConverterByConverter = converterMapByFirestore.get(firestore);\n\n      if (!untypedConverterByConverter) {\n        untypedConverterByConverter = new WeakMap();\n        converterMapByFirestore.set(firestore, untypedConverterByConverter);\n      }\n\n      var instance = untypedConverterByConverter.get(converter);\n\n      if (!instance) {\n        instance = new FirestoreDataConverter(firestore, new UserDataWriter(firestore), converter);\n        untypedConverterByConverter.set(converter, instance);\n      }\n\n      return instance;\n    }\n  }]);\n\n  return FirestoreDataConverter;\n}();\n\nFirestoreDataConverter.INSTANCES = new WeakMap();\n/**\r\n * A reference to a particular document in a collection in the database.\r\n */\n\nvar DocumentReference = /*#__PURE__*/function () {\n  function DocumentReference(firestore, _delegate) {\n    _classCallCheck(this, DocumentReference);\n\n    this.firestore = firestore;\n    this._delegate = _delegate;\n    this._userDataWriter = new UserDataWriter(firestore);\n  }\n\n  _createClass(DocumentReference, [{\n    key: \"id\",\n    get: function get() {\n      return this._delegate.id;\n    }\n  }, {\n    key: \"parent\",\n    get: function get() {\n      return new CollectionReference(this.firestore, this._delegate.parent);\n    }\n  }, {\n    key: \"path\",\n    get: function get() {\n      return this._delegate.path;\n    }\n  }, {\n    key: \"collection\",\n    value: function collection(pathString) {\n      try {\n        return new CollectionReference(this.firestore, _collection(this._delegate, pathString));\n      } catch (e) {\n        throw replaceFunctionName(e, 'collection()', 'DocumentReference.collection()');\n      }\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      other = getModularInstance(other);\n\n      if (!(other instanceof DocumentReference$1)) {\n        return false;\n      }\n\n      return refEqual(this._delegate, other);\n    }\n  }, {\n    key: \"set\",\n    value: function set(value, options) {\n      options = validateSetOptions('DocumentReference.set', options);\n\n      try {\n        if (options) {\n          return setDoc(this._delegate, value, options);\n        } else {\n          return setDoc(this._delegate, value);\n        }\n      } catch (e) {\n        throw replaceFunctionName(e, 'setDoc()', 'DocumentReference.set()');\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(fieldOrUpdateData, value) {\n      for (var _len3 = arguments.length, moreFieldsAndValues = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n        moreFieldsAndValues[_key3 - 2] = arguments[_key3];\n      }\n\n      try {\n        if (arguments.length === 1) {\n          return updateDoc(this._delegate, fieldOrUpdateData);\n        } else {\n          return updateDoc.apply(void 0, [this._delegate, fieldOrUpdateData, value].concat(moreFieldsAndValues));\n        }\n      } catch (e) {\n        throw replaceFunctionName(e, 'updateDoc()', 'DocumentReference.update()');\n      }\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      return deleteDoc(this._delegate);\n    }\n  }, {\n    key: \"onSnapshot\",\n    value: function onSnapshot() {\n      var _this7 = this;\n\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      var options = extractSnapshotOptions(args);\n      var observer = wrapObserver(args, function (result) {\n        return new DocumentSnapshot(_this7.firestore, new DocumentSnapshot$1(_this7.firestore._delegate, _this7._userDataWriter, result._key, result._document, result.metadata, _this7._delegate.converter));\n      });\n      return _onSnapshot(this._delegate, options, observer);\n    }\n  }, {\n    key: \"get\",\n    value: function get(options) {\n      var _this8 = this;\n\n      var snap;\n\n      if ((options === null || options === void 0 ? void 0 : options.source) === 'cache') {\n        snap = getDocFromCache(this._delegate);\n      } else if ((options === null || options === void 0 ? void 0 : options.source) === 'server') {\n        snap = getDocFromServer(this._delegate);\n      } else {\n        snap = getDoc(this._delegate);\n      }\n\n      return snap.then(function (result) {\n        return new DocumentSnapshot(_this8.firestore, new DocumentSnapshot$1(_this8.firestore._delegate, _this8._userDataWriter, result._key, result._document, result.metadata, _this8._delegate.converter));\n      });\n    }\n  }, {\n    key: \"withConverter\",\n    value: function withConverter(converter) {\n      return new DocumentReference(this.firestore, converter ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter)) : this._delegate.withConverter(null));\n    }\n  }], [{\n    key: \"forPath\",\n    value: function forPath(path, firestore, converter) {\n      if (path.length % 2 !== 0) {\n        throw new FirestoreError('invalid-argument', 'Invalid document reference. Document ' + 'references must have an even number of segments, but ' + \"\".concat(path.canonicalString(), \" has \").concat(path.length));\n      }\n\n      return new DocumentReference(firestore, new DocumentReference$1(firestore._delegate, converter, new _DocumentKey(path)));\n    }\n  }, {\n    key: \"forKey\",\n    value: function forKey(key, firestore, converter) {\n      return new DocumentReference(firestore, new DocumentReference$1(firestore._delegate, converter, key));\n    }\n  }]);\n\n  return DocumentReference;\n}();\n/**\r\n * Replaces the function name in an error thrown by the firestore-exp API\r\n * with the function names used in the classic API.\r\n */\n\n\nfunction replaceFunctionName(e, original, updated) {\n  e.message = e.message.replace(original, updated);\n  return e;\n}\n/**\r\n * Iterates the list of arguments from an `onSnapshot` call and returns the\r\n * first argument that may be an `SnapshotListenOptions` object. Returns an\r\n * empty object if none is found.\r\n */\n\n\nfunction extractSnapshotOptions(args) {\n  var _iterator2 = _createForOfIteratorHelper(args),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var arg = _step2.value;\n\n      if (typeof arg === 'object' && !isPartialObserver(arg)) {\n        return arg;\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return {};\n}\n/**\r\n * Creates an observer that can be passed to the firestore-exp SDK. The\r\n * observer converts all observed values into the format expected by the classic\r\n * SDK.\r\n *\r\n * @param args - The list of arguments from an `onSnapshot` call.\r\n * @param wrapper - The function that converts the firestore-exp type into the\r\n * type used by this shim.\r\n */\n\n\nfunction wrapObserver(args, wrapper) {\n  var _a, _b;\n\n  var userObserver;\n\n  if (isPartialObserver(args[0])) {\n    userObserver = args[0];\n  } else if (isPartialObserver(args[1])) {\n    userObserver = args[1];\n  } else if (typeof args[0] === 'function') {\n    userObserver = {\n      next: args[0],\n      error: args[1],\n      complete: args[2]\n    };\n  } else {\n    userObserver = {\n      next: args[1],\n      error: args[2],\n      complete: args[3]\n    };\n  }\n\n  return {\n    next: function next(val) {\n      if (userObserver.next) {\n        userObserver.next(wrapper(val));\n      }\n    },\n    error: (_a = userObserver.error) === null || _a === void 0 ? void 0 : _a.bind(userObserver),\n    complete: (_b = userObserver.complete) === null || _b === void 0 ? void 0 : _b.bind(userObserver)\n  };\n}\n\nvar DocumentSnapshot = /*#__PURE__*/function () {\n  function DocumentSnapshot(_firestore, _delegate) {\n    _classCallCheck(this, DocumentSnapshot);\n\n    this._firestore = _firestore;\n    this._delegate = _delegate;\n  }\n\n  _createClass(DocumentSnapshot, [{\n    key: \"ref\",\n    get: function get() {\n      return new DocumentReference(this._firestore, this._delegate.ref);\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._delegate.id;\n    }\n  }, {\n    key: \"metadata\",\n    get: function get() {\n      return this._delegate.metadata;\n    }\n  }, {\n    key: \"exists\",\n    get: function get() {\n      return this._delegate.exists();\n    }\n  }, {\n    key: \"data\",\n    value: function data(options) {\n      return this._delegate.data(options);\n    }\n  }, {\n    key: \"get\",\n    value: function get(fieldPath, options // We are using `any` here to avoid an explicit cast by our users.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ) {\n      return this._delegate.get(fieldPath, options);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      return snapshotEqual(this._delegate, other._delegate);\n    }\n  }]);\n\n  return DocumentSnapshot;\n}();\n\nvar QueryDocumentSnapshot = /*#__PURE__*/function (_DocumentSnapshot) {\n  _inherits(QueryDocumentSnapshot, _DocumentSnapshot);\n\n  var _super2 = _createSuper(QueryDocumentSnapshot);\n\n  function QueryDocumentSnapshot() {\n    _classCallCheck(this, QueryDocumentSnapshot);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(QueryDocumentSnapshot, [{\n    key: \"data\",\n    value: function data(options) {\n      var data = this._delegate.data(options);\n\n      _debugAssert(data !== undefined, 'Document in a QueryDocumentSnapshot should exist');\n\n      return data;\n    }\n  }]);\n\n  return QueryDocumentSnapshot;\n}(DocumentSnapshot);\n\nvar Query = /*#__PURE__*/function () {\n  function Query(firestore, _delegate) {\n    _classCallCheck(this, Query);\n\n    this.firestore = firestore;\n    this._delegate = _delegate;\n    this._userDataWriter = new UserDataWriter(firestore);\n  }\n\n  _createClass(Query, [{\n    key: \"where\",\n    value: function where(fieldPath, opStr, value) {\n      try {\n        // The \"as string\" cast is a little bit of a hack. `where` accepts the\n        // FieldPath Compat type as input, but is not typed as such in order to\n        // not expose this via our public typings file.\n        return new Query(this.firestore, query(this._delegate, _where(fieldPath, opStr, value)));\n      } catch (e) {\n        throw replaceFunctionName(e, /(orderBy|where)\\(\\)/, 'Query.$1()');\n      }\n    }\n  }, {\n    key: \"orderBy\",\n    value: function orderBy(fieldPath, directionStr) {\n      try {\n        // The \"as string\" cast is a little bit of a hack. `orderBy` accepts the\n        // FieldPath Compat type as input, but is not typed as such in order to\n        // not expose this via our public typings file.\n        return new Query(this.firestore, query(this._delegate, _orderBy(fieldPath, directionStr)));\n      } catch (e) {\n        throw replaceFunctionName(e, /(orderBy|where)\\(\\)/, 'Query.$1()');\n      }\n    }\n  }, {\n    key: \"limit\",\n    value: function limit(n) {\n      try {\n        return new Query(this.firestore, query(this._delegate, _limit(n)));\n      } catch (e) {\n        throw replaceFunctionName(e, 'limit()', 'Query.limit()');\n      }\n    }\n  }, {\n    key: \"limitToLast\",\n    value: function limitToLast(n) {\n      try {\n        return new Query(this.firestore, query(this._delegate, _limitToLast(n)));\n      } catch (e) {\n        throw replaceFunctionName(e, 'limitToLast()', 'Query.limitToLast()');\n      }\n    }\n  }, {\n    key: \"startAt\",\n    value: function startAt() {\n      try {\n        return new Query(this.firestore, query(this._delegate, _startAt.apply(void 0, arguments)));\n      } catch (e) {\n        throw replaceFunctionName(e, 'startAt()', 'Query.startAt()');\n      }\n    }\n  }, {\n    key: \"startAfter\",\n    value: function startAfter() {\n      try {\n        return new Query(this.firestore, query(this._delegate, _startAfter.apply(void 0, arguments)));\n      } catch (e) {\n        throw replaceFunctionName(e, 'startAfter()', 'Query.startAfter()');\n      }\n    }\n  }, {\n    key: \"endBefore\",\n    value: function endBefore() {\n      try {\n        return new Query(this.firestore, query(this._delegate, _endBefore.apply(void 0, arguments)));\n      } catch (e) {\n        throw replaceFunctionName(e, 'endBefore()', 'Query.endBefore()');\n      }\n    }\n  }, {\n    key: \"endAt\",\n    value: function endAt() {\n      try {\n        return new Query(this.firestore, query(this._delegate, _endAt.apply(void 0, arguments)));\n      } catch (e) {\n        throw replaceFunctionName(e, 'endAt()', 'Query.endAt()');\n      }\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      return queryEqual(this._delegate, other._delegate);\n    }\n  }, {\n    key: \"get\",\n    value: function get(options) {\n      var _this9 = this;\n\n      var query;\n\n      if ((options === null || options === void 0 ? void 0 : options.source) === 'cache') {\n        query = getDocsFromCache(this._delegate);\n      } else if ((options === null || options === void 0 ? void 0 : options.source) === 'server') {\n        query = getDocsFromServer(this._delegate);\n      } else {\n        query = getDocs(this._delegate);\n      }\n\n      return query.then(function (result) {\n        return new QuerySnapshot(_this9.firestore, new QuerySnapshot$1(_this9.firestore._delegate, _this9._userDataWriter, _this9._delegate, result._snapshot));\n      });\n    }\n  }, {\n    key: \"onSnapshot\",\n    value: function onSnapshot() {\n      var _this10 = this;\n\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n\n      var options = extractSnapshotOptions(args);\n      var observer = wrapObserver(args, function (snap) {\n        return new QuerySnapshot(_this10.firestore, new QuerySnapshot$1(_this10.firestore._delegate, _this10._userDataWriter, _this10._delegate, snap._snapshot));\n      });\n      return _onSnapshot(this._delegate, options, observer);\n    }\n  }, {\n    key: \"withConverter\",\n    value: function withConverter(converter) {\n      return new Query(this.firestore, converter ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter)) : this._delegate.withConverter(null));\n    }\n  }]);\n\n  return Query;\n}();\n\nvar DocumentChange = /*#__PURE__*/function () {\n  function DocumentChange(_firestore, _delegate) {\n    _classCallCheck(this, DocumentChange);\n\n    this._firestore = _firestore;\n    this._delegate = _delegate;\n  }\n\n  _createClass(DocumentChange, [{\n    key: \"type\",\n    get: function get() {\n      return this._delegate.type;\n    }\n  }, {\n    key: \"doc\",\n    get: function get() {\n      return new QueryDocumentSnapshot(this._firestore, this._delegate.doc);\n    }\n  }, {\n    key: \"oldIndex\",\n    get: function get() {\n      return this._delegate.oldIndex;\n    }\n  }, {\n    key: \"newIndex\",\n    get: function get() {\n      return this._delegate.newIndex;\n    }\n  }]);\n\n  return DocumentChange;\n}();\n\nvar QuerySnapshot = /*#__PURE__*/function () {\n  function QuerySnapshot(_firestore, _delegate) {\n    _classCallCheck(this, QuerySnapshot);\n\n    this._firestore = _firestore;\n    this._delegate = _delegate;\n  }\n\n  _createClass(QuerySnapshot, [{\n    key: \"query\",\n    get: function get() {\n      return new Query(this._firestore, this._delegate.query);\n    }\n  }, {\n    key: \"metadata\",\n    get: function get() {\n      return this._delegate.metadata;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._delegate.size;\n    }\n  }, {\n    key: \"empty\",\n    get: function get() {\n      return this._delegate.empty;\n    }\n  }, {\n    key: \"docs\",\n    get: function get() {\n      var _this11 = this;\n\n      return this._delegate.docs.map(function (doc) {\n        return new QueryDocumentSnapshot(_this11._firestore, doc);\n      });\n    }\n  }, {\n    key: \"docChanges\",\n    value: function docChanges(options) {\n      var _this12 = this;\n\n      return this._delegate.docChanges(options).map(function (docChange) {\n        return new DocumentChange(_this12._firestore, docChange);\n      });\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback, thisArg) {\n      var _this13 = this;\n\n      this._delegate.forEach(function (snapshot) {\n        callback.call(thisArg, new QueryDocumentSnapshot(_this13._firestore, snapshot));\n      });\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      return snapshotEqual(this._delegate, other._delegate);\n    }\n  }]);\n\n  return QuerySnapshot;\n}();\n\nvar CollectionReference = /*#__PURE__*/function (_Query) {\n  _inherits(CollectionReference, _Query);\n\n  var _super3 = _createSuper(CollectionReference);\n\n  function CollectionReference(firestore, _delegate) {\n    var _this14;\n\n    _classCallCheck(this, CollectionReference);\n\n    _this14 = _super3.call(this, firestore, _delegate);\n    _this14.firestore = firestore;\n    _this14._delegate = _delegate;\n    return _this14;\n  }\n\n  _createClass(CollectionReference, [{\n    key: \"id\",\n    get: function get() {\n      return this._delegate.id;\n    }\n  }, {\n    key: \"path\",\n    get: function get() {\n      return this._delegate.path;\n    }\n  }, {\n    key: \"parent\",\n    get: function get() {\n      var docRef = this._delegate.parent;\n      return docRef ? new DocumentReference(this.firestore, docRef) : null;\n    }\n  }, {\n    key: \"doc\",\n    value: function doc(documentPath) {\n      try {\n        if (documentPath === undefined) {\n          // Call `doc` without `documentPath` if `documentPath` is `undefined`\n          // as `doc` validates the number of arguments to prevent users from\n          // accidentally passing `undefined`.\n          return new DocumentReference(this.firestore, _doc(this._delegate));\n        } else {\n          return new DocumentReference(this.firestore, _doc(this._delegate, documentPath));\n        }\n      } catch (e) {\n        throw replaceFunctionName(e, 'doc()', 'CollectionReference.doc()');\n      }\n    }\n  }, {\n    key: \"add\",\n    value: function add(data) {\n      var _this15 = this;\n\n      return addDoc(this._delegate, data).then(function (docRef) {\n        return new DocumentReference(_this15.firestore, docRef);\n      });\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      return refEqual(this._delegate, other._delegate);\n    }\n  }, {\n    key: \"withConverter\",\n    value: function withConverter(converter) {\n      return new CollectionReference(this.firestore, converter ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter)) : this._delegate.withConverter(null));\n    }\n  }]);\n\n  return CollectionReference;\n}(Query);\n\nfunction castReference(documentRef) {\n  return _cast(documentRef, DocumentReference$1);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n\n/**\r\n * A `FieldPath` refers to a field in a document. The path may consist of a\r\n * single field name (referring to a top-level field in the document), or a list\r\n * of field names (referring to a nested field in the document).\r\n */\n\n\nvar FieldPath = /*#__PURE__*/function () {\n  /**\r\n   * Creates a FieldPath from the provided field names. If more than one field\r\n   * name is provided, the path will point to a nested field in a document.\r\n   *\r\n   * @param fieldNames - A list of field names.\r\n   */\n  function FieldPath() {\n    _classCallCheck(this, FieldPath);\n\n    for (var _len6 = arguments.length, fieldNames = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      fieldNames[_key6] = arguments[_key6];\n    }\n\n    this._delegate = _construct(FieldPath$1, fieldNames);\n  }\n\n  _createClass(FieldPath, [{\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      other = getModularInstance(other);\n\n      if (!(other instanceof FieldPath$1)) {\n        return false;\n      }\n\n      return this._delegate._internalPath.isEqual(other._internalPath);\n    }\n  }], [{\n    key: \"documentId\",\n    value: function documentId() {\n      /**\r\n       * Internal Note: The backend doesn't technically support querying by\r\n       * document ID. Instead it queries by the entire document name (full path\r\n       * included), but in the cases we currently support documentId(), the net\r\n       * effect is the same.\r\n       */\n      return new FieldPath(_FieldPath.keyField().canonicalString());\n    }\n  }]);\n\n  return FieldPath;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar FieldValue = /*#__PURE__*/function () {\n  function FieldValue(_delegate) {\n    _classCallCheck(this, FieldValue);\n\n    this._delegate = _delegate;\n  }\n\n  _createClass(FieldValue, [{\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      return this._delegate.isEqual(other._delegate);\n    }\n  }], [{\n    key: \"serverTimestamp\",\n    value: function serverTimestamp() {\n      var delegate = _serverTimestamp();\n\n      delegate._methodName = 'FieldValue.serverTimestamp';\n      return new FieldValue(delegate);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var delegate = deleteField();\n      delegate._methodName = 'FieldValue.delete';\n      return new FieldValue(delegate);\n    }\n  }, {\n    key: \"arrayUnion\",\n    value: function arrayUnion() {\n      var delegate = _arrayUnion.apply(void 0, arguments);\n\n      delegate._methodName = 'FieldValue.arrayUnion';\n      return new FieldValue(delegate);\n    }\n  }, {\n    key: \"arrayRemove\",\n    value: function arrayRemove() {\n      var delegate = _arrayRemove.apply(void 0, arguments);\n\n      delegate._methodName = 'FieldValue.arrayRemove';\n      return new FieldValue(delegate);\n    }\n  }, {\n    key: \"increment\",\n    value: function increment(n) {\n      var delegate = _increment(n);\n\n      delegate._methodName = 'FieldValue.increment';\n      return new FieldValue(delegate);\n    }\n  }]);\n\n  return FieldValue;\n}();\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar firestoreNamespace = {\n  Firestore: Firestore,\n  GeoPoint: GeoPoint,\n  Timestamp: Timestamp,\n  Blob: Blob,\n  Transaction: Transaction,\n  WriteBatch: WriteBatch,\n  DocumentReference: DocumentReference,\n  DocumentSnapshot: DocumentSnapshot,\n  Query: Query,\n  QueryDocumentSnapshot: QueryDocumentSnapshot,\n  QuerySnapshot: QuerySnapshot,\n  CollectionReference: CollectionReference,\n  FieldPath: FieldPath,\n  FieldValue: FieldValue,\n  setLogLevel: setLogLevel,\n  CACHE_SIZE_UNLIMITED: CACHE_SIZE_UNLIMITED\n};\n/**\r\n * Configures Firestore as part of the Firebase SDK by calling registerComponent.\r\n *\r\n * @param firebase - The FirebaseNamespace to register Firestore with\r\n * @param firestoreFactory - A factory function that returns a new Firestore\r\n *    instance.\r\n */\n\nfunction configureForFirebase(firebase, firestoreFactory) {\n  firebase.INTERNAL.registerComponent(new Component('firestore-compat', function (container) {\n    var app = container.getProvider('app-compat').getImmediate();\n    var firestoreExp = container.getProvider('firestore').getImmediate();\n    return firestoreFactory(app, firestoreExp);\n  }, 'PUBLIC').setServiceProps(Object.assign({}, firestoreNamespace)));\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Registers the main Firestore build with the components framework.\r\n * Persistence can be enabled via `firebase.firestore().enablePersistence()`.\r\n */\n\n\nfunction registerFirestore(instance) {\n  configureForFirebase(instance, function (app, firestoreExp) {\n    return new Firestore(app, firestoreExp, new IndexedDbPersistenceProvider());\n  });\n  instance.registerVersion(name, version);\n}\n\nregisterFirestore(firebase);\nexport { registerFirestore };","map":{"version":3,"mappings":"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","names":["methodName","options","undefined","merge","mergeFields","FirestoreError","assertUint8ArrayAvailable","Uint8Array","assertBase64Available","_isBase64Available","Blob","_delegate","toBase64","toUint8Array","other","isEqual","base64","Bytes","fromBase64String","array","fromUint8Array","isPartialObserver","obj","implementsAnyMethods","methods","object","method","IndexedDbPersistenceProvider","firestore","forceOwnership","enableIndexedDbPersistence","enableMultiTabIndexedDbPersistence","clearIndexedDbPersistence","Firestore","databaseIdOrApp","_persistenceProvider","delete","terminate","_DatabaseId","_appCompat","_databaseId","settingsLiteral","currentSettings","_getSettings","host","_logWarn","Object","_setSettings","port","connectFirestoreEmulator","enableNetwork","disableNetwork","settings","synchronizeTabs","experimentalForceOwningTab","_validateIsNotUsedTogether","_removeServiceInstance","_delete","waitForPendingWrites","arg","onSnapshotsInSync","pathString","CollectionReference","collection","e","replaceFunctionName","DocumentReference","doc","collectionId","Query","collectionGroup","updateFunction","runTransaction","Transaction","transaction","ensureFirestoreConfigured","WriteBatch","ExpWriteBatch","executeWrite","mutations","bundleData","loadBundle","name","namedQuery","then","expQuery","UserDataWriter","bytes","key","convertDocumentKey","forKey","AbstractUserDataWriter","setLogLevel","level","setClientLogLevel","_firestore","_userDataWriter","documentRef","ref","castReference","get","DocumentSnapshot","ExpDocumentSnapshot","result","_key","_document","metadata","converter","data","validateSetOptions","set","dataOrField","value","moreFieldsAndValues","arguments","length","update","commit","FirestoreDataConverter","snapshot","expSnapshot","ExpQueryDocumentSnapshot","fromFirestore","QueryDocumentSnapshot","modelObject","toFirestore","converterMapByFirestore","INSTANCES","untypedConverterByConverter","WeakMap","instance","id","parent","path","getModularInstance","ExpDocumentReference","refEqual","setDoc","fieldOrUpdateData","updateDoc","deleteDoc","args","extractSnapshotOptions","observer","wrapObserver","onSnapshot","snap","source","getDocFromCache","getDocFromServer","getDoc","withConverter","getInstance","canonicalString","_DocumentKey","original","updated","message","replace","wrapper","userObserver","next","error","complete","val","_a","_b","exists","fieldPath","snapshotEqual","_debugAssert","opStr","query","where","directionStr","orderBy","n","limit","limitToLast","startAt","startAfter","endBefore","endAt","queryEqual","getDocsFromCache","getDocsFromServer","getDocs","QuerySnapshot","ExpQuerySnapshot","_snapshot","DocumentChange","type","oldIndex","newIndex","size","empty","docs","map","docChanges","docChange","callback","thisArg","forEach","call","docRef","documentPath","addDoc","_cast","FieldPath","fieldNames","ExpFieldPath","_internalPath","InternalFieldPath","keyField","FieldValue","delegate","serverTimestamp","_methodName","deleteField","arrayUnion","arrayRemove","increment","firestoreNamespace","GeoPoint","Timestamp","CACHE_SIZE_UNLIMITED","firebase","firestoreFactory","INTERNAL","registerComponent","Component","app","container","getProvider","getImmediate","firestoreExp","setServiceProps","registerFirestore","configureForFirebase","registerVersion","version"],"sources":["/Users/rahulgupta/Desktop/ecommerse/dealsfly/node_modules/@firebase/firestore-compat/src/util/input_validation.ts","/Users/rahulgupta/Desktop/ecommerse/dealsfly/node_modules/@firebase/firestore-compat/src/api/blob.ts","/Users/rahulgupta/Desktop/ecommerse/dealsfly/node_modules/@firebase/firestore-compat/src/api/observer.ts","/Users/rahulgupta/Desktop/ecommerse/dealsfly/node_modules/@firebase/firestore-compat/src/api/database.ts","/Users/rahulgupta/Desktop/ecommerse/dealsfly/node_modules/@firebase/firestore-compat/src/api/field_path.ts","/Users/rahulgupta/Desktop/ecommerse/dealsfly/node_modules/@firebase/firestore-compat/src/api/field_value.ts","/Users/rahulgupta/Desktop/ecommerse/dealsfly/node_modules/@firebase/firestore-compat/src/config.ts","/Users/rahulgupta/Desktop/ecommerse/dealsfly/node_modules/@firebase/firestore-compat/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirestoreError } from '@firebase/firestore';\nimport { SetOptions } from '@firebase/firestore-types';\n\nexport function validateSetOptions(\n  methodName: string,\n  options: SetOptions | undefined\n): SetOptions {\n  if (options === undefined) {\n    return {\n      merge: false\n    };\n  }\n\n  if (options.mergeFields !== undefined && options.merge !== undefined) {\n    throw new FirestoreError(\n      'invalid-argument',\n      `Invalid options passed to function ${methodName}(): You cannot ` +\n        'specify both \"merge\" and \"mergeFields\".'\n    );\n  }\n\n  return options;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Bytes, FirestoreError, _isBase64Available } from '@firebase/firestore';\nimport { Compat } from '@firebase/util';\n\n/** Helper function to assert Uint8Array is available at runtime. */\nfunction assertUint8ArrayAvailable(): void {\n  if (typeof Uint8Array === 'undefined') {\n    throw new FirestoreError(\n      'unimplemented',\n      'Uint8Arrays are not available in this environment.'\n    );\n  }\n}\n\n/** Helper function to assert Base64 functions are available at runtime. */\nfunction assertBase64Available(): void {\n  if (!_isBase64Available()) {\n    throw new FirestoreError(\n      'unimplemented',\n      'Blobs are unavailable in Firestore in this environment.'\n    );\n  }\n}\n\n/** Immutable class holding a blob (binary data) */\nexport class Blob implements Compat<Bytes> {\n  constructor(readonly _delegate: Bytes) {}\n  static fromBase64String(base64: string): Blob {\n    assertBase64Available();\n    return new Blob(Bytes.fromBase64String(base64));\n  }\n\n  static fromUint8Array(array: Uint8Array): Blob {\n    assertUint8ArrayAvailable();\n    return new Blob(Bytes.fromUint8Array(array));\n  }\n\n  toBase64(): string {\n    assertBase64Available();\n    return this._delegate.toBase64();\n  }\n\n  toUint8Array(): Uint8Array {\n    assertUint8ArrayAvailable();\n    return this._delegate.toUint8Array();\n  }\n\n  isEqual(other: Blob): boolean {\n    return this._delegate.isEqual(other._delegate);\n  }\n\n  toString(): string {\n    return 'Blob(base64: ' + this.toBase64() + ')';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirestoreError } from '@firebase/firestore';\n\n/**\n * Observer/Subscribe interfaces.\n */\nexport type NextFn<T> = (value: T) => void;\nexport type ErrorFn = (error: FirestoreError) => void;\nexport type CompleteFn = () => void;\n\n// Allow for any of the Observer methods to be undefined.\nexport interface PartialObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n}\n\nexport function isPartialObserver<T>(obj: unknown): obj is PartialObserver<T> {\n  return implementsAnyMethods(obj, ['next', 'error', 'complete']);\n}\n\n/**\n * Returns true if obj is an object and contains at least one of the specified\n * methods.\n */\nfunction implementsAnyMethods(obj: unknown, methods: string[]): boolean {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  const object = obj as Record<string, unknown>;\n  for (const method of methods) {\n    if (method in object && typeof object[method] === 'function') {\n      return true;\n    }\n  }\n  return false;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { _FirebaseApp, FirebaseService } from '@firebase/app-types/private';\nimport {\n  LoadBundleTask,\n  Bytes,\n  clearIndexedDbPersistence,\n  disableNetwork,\n  enableIndexedDbPersistence,\n  enableMultiTabIndexedDbPersistence,\n  enableNetwork,\n  ensureFirestoreConfigured,\n  Firestore as ExpFirestore,\n  connectFirestoreEmulator,\n  waitForPendingWrites,\n  FieldPath as ExpFieldPath,\n  limit,\n  limitToLast,\n  where,\n  orderBy,\n  startAfter,\n  startAt,\n  query,\n  endBefore,\n  endAt,\n  doc,\n  collection,\n  collectionGroup,\n  queryEqual,\n  Query as ExpQuery,\n  CollectionReference as ExpCollectionReference,\n  DocumentReference as ExpDocumentReference,\n  refEqual,\n  addDoc,\n  deleteDoc,\n  executeWrite,\n  getDoc,\n  getDocFromCache,\n  getDocFromServer,\n  getDocs,\n  getDocsFromCache,\n  getDocsFromServer,\n  onSnapshot,\n  onSnapshotsInSync,\n  setDoc,\n  updateDoc,\n  Unsubscribe,\n  DocumentChange as ExpDocumentChange,\n  DocumentSnapshot as ExpDocumentSnapshot,\n  QueryDocumentSnapshot as ExpQueryDocumentSnapshot,\n  QuerySnapshot as ExpQuerySnapshot,\n  snapshotEqual,\n  SnapshotMetadata,\n  runTransaction,\n  Transaction as ExpTransaction,\n  WriteBatch as ExpWriteBatch,\n  AbstractUserDataWriter,\n  FirestoreError,\n  FirestoreDataConverter as ModularFirestoreDataConverter,\n  setLogLevel as setClientLogLevel,\n  _DatabaseId,\n  _validateIsNotUsedTogether,\n  _cast,\n  _DocumentKey,\n  _debugAssert,\n  _FieldPath,\n  _ResourcePath,\n  _ByteString,\n  _logWarn,\n  namedQuery,\n  loadBundle,\n  PartialWithFieldValue,\n  WithFieldValue\n} from '@firebase/firestore';\nimport {\n  CollectionReference as PublicCollectionReference,\n  DocumentChange as PublicDocumentChange,\n  DocumentChangeType as PublicDocumentChangeType,\n  DocumentData,\n  DocumentData as PublicDocumentData,\n  DocumentReference as PublicDocumentReference,\n  DocumentSnapshot as PublicDocumentSnapshot,\n  FieldPath as PublicFieldPath,\n  FirebaseFirestore as PublicFirestore,\n  FirestoreDataConverter as PublicFirestoreDataConverter,\n  GetOptions as PublicGetOptions,\n  LogLevel as PublicLogLevel,\n  OrderByDirection as PublicOrderByDirection,\n  PersistenceSettings as PublicPersistenceSettings,\n  Query as PublicQuery,\n  QueryDocumentSnapshot as PublicQueryDocumentSnapshot,\n  QuerySnapshot as PublicQuerySnapshot,\n  SetOptions as PublicSetOptions,\n  Settings as PublicSettings,\n  SnapshotListenOptions as PublicSnapshotListenOptions,\n  SnapshotOptions as PublicSnapshotOptions,\n  Transaction as PublicTransaction,\n  UpdateData as PublicUpdateData,\n  WhereFilterOp as PublicWhereFilterOp,\n  WriteBatch as PublicWriteBatch\n} from '@firebase/firestore-types';\nimport {\n  Compat,\n  EmulatorMockTokenOptions,\n  getModularInstance\n} from '@firebase/util';\n\nimport { validateSetOptions } from '../util/input_validation';\n\nimport { Blob } from './blob';\nimport {\n  CompleteFn,\n  ErrorFn,\n  isPartialObserver,\n  NextFn,\n  PartialObserver\n} from './observer';\n\n/**\n * A persistence provider for either memory-only or IndexedDB persistence.\n * Mainly used to allow optional inclusion of IndexedDB code.\n */\nexport interface PersistenceProvider {\n  enableIndexedDbPersistence(\n    firestore: Firestore,\n    forceOwnership: boolean\n  ): Promise<void>;\n  enableMultiTabIndexedDbPersistence(firestore: Firestore): Promise<void>;\n  clearIndexedDbPersistence(firestore: Firestore): Promise<void>;\n}\n\n/**\n * The persistence provider included with the full Firestore SDK.\n */\nexport class IndexedDbPersistenceProvider implements PersistenceProvider {\n  enableIndexedDbPersistence(\n    firestore: Firestore,\n    forceOwnership: boolean\n  ): Promise<void> {\n    return enableIndexedDbPersistence(firestore._delegate, { forceOwnership });\n  }\n  enableMultiTabIndexedDbPersistence(firestore: Firestore): Promise<void> {\n    return enableMultiTabIndexedDbPersistence(firestore._delegate);\n  }\n  clearIndexedDbPersistence(firestore: Firestore): Promise<void> {\n    return clearIndexedDbPersistence(firestore._delegate);\n  }\n}\n\n/**\n * Compat class for Firestore. Exposes Firestore Legacy API, but delegates\n * to the functional API of firestore-exp.\n */\nexport class Firestore\n  implements PublicFirestore, FirebaseService, Compat<ExpFirestore>\n{\n  _appCompat?: FirebaseApp;\n  constructor(\n    databaseIdOrApp: _DatabaseId | FirebaseApp,\n    readonly _delegate: ExpFirestore,\n    private _persistenceProvider: PersistenceProvider\n  ) {\n    if (!(databaseIdOrApp instanceof _DatabaseId)) {\n      this._appCompat = databaseIdOrApp as FirebaseApp;\n    }\n  }\n\n  get _databaseId(): _DatabaseId {\n    return this._delegate._databaseId;\n  }\n\n  settings(settingsLiteral: PublicSettings): void {\n    const currentSettings = this._delegate._getSettings();\n    if (\n      !settingsLiteral.merge &&\n      currentSettings.host !== settingsLiteral.host\n    ) {\n      _logWarn(\n        'You are overriding the original host. If you did not intend ' +\n          'to override your settings, use {merge: true}.'\n      );\n    }\n\n    if (settingsLiteral.merge) {\n      settingsLiteral = {\n        ...currentSettings,\n        ...settingsLiteral\n      };\n      // Remove the property from the settings once the merge is completed\n      delete settingsLiteral.merge;\n    }\n\n    this._delegate._setSettings(settingsLiteral);\n  }\n\n  useEmulator(\n    host: string,\n    port: number,\n    options: {\n      mockUserToken?: EmulatorMockTokenOptions | string;\n    } = {}\n  ): void {\n    connectFirestoreEmulator(this._delegate, host, port, options);\n  }\n\n  enableNetwork(): Promise<void> {\n    return enableNetwork(this._delegate);\n  }\n\n  disableNetwork(): Promise<void> {\n    return disableNetwork(this._delegate);\n  }\n\n  enablePersistence(settings?: PublicPersistenceSettings): Promise<void> {\n    let synchronizeTabs = false;\n    let experimentalForceOwningTab = false;\n\n    if (settings) {\n      synchronizeTabs = !!settings.synchronizeTabs;\n      experimentalForceOwningTab = !!settings.experimentalForceOwningTab;\n\n      _validateIsNotUsedTogether(\n        'synchronizeTabs',\n        synchronizeTabs,\n        'experimentalForceOwningTab',\n        experimentalForceOwningTab\n      );\n    }\n\n    return synchronizeTabs\n      ? this._persistenceProvider.enableMultiTabIndexedDbPersistence(this)\n      : this._persistenceProvider.enableIndexedDbPersistence(\n          this,\n          experimentalForceOwningTab\n        );\n  }\n\n  clearPersistence(): Promise<void> {\n    return this._persistenceProvider.clearIndexedDbPersistence(this);\n  }\n\n  terminate(): Promise<void> {\n    if (this._appCompat) {\n      (this._appCompat as _FirebaseApp)._removeServiceInstance(\n        'firestore-compat'\n      );\n      (this._appCompat as _FirebaseApp)._removeServiceInstance('firestore');\n    }\n    return this._delegate._delete();\n  }\n\n  waitForPendingWrites(): Promise<void> {\n    return waitForPendingWrites(this._delegate);\n  }\n\n  onSnapshotsInSync(observer: PartialObserver<void>): Unsubscribe;\n  onSnapshotsInSync(onSync: () => void): Unsubscribe;\n  onSnapshotsInSync(arg: unknown): Unsubscribe {\n    return onSnapshotsInSync(this._delegate, arg as PartialObserver<void>);\n  }\n\n  get app(): FirebaseApp {\n    if (!this._appCompat) {\n      throw new FirestoreError(\n        'failed-precondition',\n        \"Firestore was not initialized using the Firebase SDK. 'app' is \" +\n          'not available'\n      );\n    }\n    return this._appCompat as FirebaseApp;\n  }\n\n  INTERNAL = {\n    delete: () => this.terminate()\n  };\n\n  collection(pathString: string): PublicCollectionReference {\n    try {\n      return new CollectionReference(\n        this,\n        collection(this._delegate, pathString)\n      );\n    } catch (e) {\n      throw replaceFunctionName(\n        e as Error,\n        'collection()',\n        'Firestore.collection()'\n      );\n    }\n  }\n\n  doc(pathString: string): PublicDocumentReference {\n    try {\n      return new DocumentReference(this, doc(this._delegate, pathString));\n    } catch (e) {\n      throw replaceFunctionName(e as Error, 'doc()', 'Firestore.doc()');\n    }\n  }\n\n  collectionGroup(collectionId: string): PublicQuery {\n    try {\n      return new Query(this, collectionGroup(this._delegate, collectionId));\n    } catch (e) {\n      throw replaceFunctionName(\n        e as Error,\n        'collectionGroup()',\n        'Firestore.collectionGroup()'\n      );\n    }\n  }\n\n  runTransaction<T>(\n    updateFunction: (transaction: PublicTransaction) => Promise<T>\n  ): Promise<T> {\n    return runTransaction(this._delegate, transaction =>\n      updateFunction(new Transaction(this, transaction))\n    );\n  }\n\n  batch(): PublicWriteBatch {\n    ensureFirestoreConfigured(this._delegate);\n    return new WriteBatch(\n      new ExpWriteBatch(this._delegate, mutations =>\n        executeWrite(this._delegate, mutations)\n      )\n    );\n  }\n\n  loadBundle(\n    bundleData: ArrayBuffer | ReadableStream<Uint8Array> | string\n  ): LoadBundleTask {\n    return loadBundle(this._delegate, bundleData);\n  }\n\n  namedQuery(name: string): Promise<PublicQuery<DocumentData> | null> {\n    return namedQuery(this._delegate, name).then(expQuery => {\n      if (!expQuery) {\n        return null;\n      }\n      return new Query(\n        this,\n        // We can pass `expQuery` here directly since named queries don't have a UserDataConverter.\n        // Otherwise, we would have to create a new ExpQuery and pass the old UserDataConverter.\n        expQuery\n      );\n    });\n  }\n}\n\nexport class UserDataWriter extends AbstractUserDataWriter {\n  constructor(protected firestore: Firestore) {\n    super();\n  }\n\n  protected convertBytes(bytes: _ByteString): Blob {\n    return new Blob(new Bytes(bytes));\n  }\n\n  protected convertReference(name: string): DocumentReference {\n    const key = this.convertDocumentKey(name, this.firestore._databaseId);\n    return DocumentReference.forKey(key, this.firestore, /* converter= */ null);\n  }\n}\n\nexport function setLogLevel(level: PublicLogLevel): void {\n  setClientLogLevel(level);\n}\n\n/**\n * A reference to a transaction.\n */\nexport class Transaction implements PublicTransaction, Compat<ExpTransaction> {\n  private _userDataWriter: UserDataWriter;\n\n  constructor(\n    private readonly _firestore: Firestore,\n    readonly _delegate: ExpTransaction\n  ) {\n    this._userDataWriter = new UserDataWriter(_firestore);\n  }\n\n  get<T>(\n    documentRef: PublicDocumentReference<T>\n  ): Promise<PublicDocumentSnapshot<T>> {\n    const ref = castReference(documentRef);\n    return this._delegate\n      .get(ref)\n      .then(\n        result =>\n          new DocumentSnapshot(\n            this._firestore,\n            new ExpDocumentSnapshot<T>(\n              this._firestore._delegate,\n              this._userDataWriter,\n              result._key,\n              result._document,\n              result.metadata,\n              ref.converter\n            )\n          )\n      );\n  }\n\n  set<T>(\n    documentRef: DocumentReference<T>,\n    data: Partial<T>,\n    options: PublicSetOptions\n  ): Transaction;\n  set<T>(documentRef: DocumentReference<T>, data: T): Transaction;\n  set<T>(\n    documentRef: PublicDocumentReference<T>,\n    data: T | Partial<T>,\n    options?: PublicSetOptions\n  ): Transaction {\n    const ref = castReference(documentRef);\n    if (options) {\n      validateSetOptions('Transaction.set', options);\n      this._delegate.set(ref, data as PartialWithFieldValue<T>, options);\n    } else {\n      this._delegate.set(ref, data as WithFieldValue<T>);\n    }\n    return this;\n  }\n\n  update(\n    documentRef: PublicDocumentReference<unknown>,\n    data: PublicUpdateData\n  ): Transaction;\n  update(\n    documentRef: PublicDocumentReference<unknown>,\n    field: string | PublicFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Transaction;\n  update(\n    documentRef: PublicDocumentReference<unknown>,\n    dataOrField: unknown,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Transaction {\n    const ref = castReference(documentRef);\n    if (arguments.length === 2) {\n      this._delegate.update(ref, dataOrField as PublicUpdateData);\n    } else {\n      this._delegate.update(\n        ref,\n        dataOrField as string | ExpFieldPath,\n        value,\n        ...moreFieldsAndValues\n      );\n    }\n\n    return this;\n  }\n\n  delete(documentRef: PublicDocumentReference<unknown>): Transaction {\n    const ref = castReference(documentRef);\n    this._delegate.delete(ref);\n    return this;\n  }\n}\n\nexport class WriteBatch implements PublicWriteBatch, Compat<ExpWriteBatch> {\n  constructor(readonly _delegate: ExpWriteBatch) {}\n  set<T>(\n    documentRef: DocumentReference<T>,\n    data: Partial<T>,\n    options: PublicSetOptions\n  ): WriteBatch;\n  set<T>(documentRef: DocumentReference<T>, data: T): WriteBatch;\n  set<T>(\n    documentRef: PublicDocumentReference<T>,\n    data: T | Partial<T>,\n    options?: PublicSetOptions\n  ): WriteBatch {\n    const ref = castReference(documentRef);\n    if (options) {\n      validateSetOptions('WriteBatch.set', options);\n      this._delegate.set(ref, data as PartialWithFieldValue<T>, options);\n    } else {\n      this._delegate.set(ref, data as WithFieldValue<T>);\n    }\n    return this;\n  }\n\n  update(\n    documentRef: PublicDocumentReference<unknown>,\n    data: PublicUpdateData\n  ): WriteBatch;\n  update(\n    documentRef: PublicDocumentReference<unknown>,\n    field: string | PublicFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): WriteBatch;\n  update(\n    documentRef: PublicDocumentReference<unknown>,\n    dataOrField: string | PublicFieldPath | PublicUpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): WriteBatch {\n    const ref = castReference(documentRef);\n    if (arguments.length === 2) {\n      this._delegate.update(ref, dataOrField as PublicUpdateData);\n    } else {\n      this._delegate.update(\n        ref,\n        dataOrField as string | ExpFieldPath,\n        value,\n        ...moreFieldsAndValues\n      );\n    }\n    return this;\n  }\n\n  delete(documentRef: PublicDocumentReference<unknown>): WriteBatch {\n    const ref = castReference(documentRef);\n    this._delegate.delete(ref);\n    return this;\n  }\n\n  commit(): Promise<void> {\n    return this._delegate.commit();\n  }\n}\n\n/**\n * Wraps a `PublicFirestoreDataConverter` translating the types from the\n * experimental SDK into corresponding types from the Classic SDK before passing\n * them to the wrapped converter.\n */\nclass FirestoreDataConverter<U>\n  implements\n    ModularFirestoreDataConverter<U>,\n    Compat<PublicFirestoreDataConverter<U>>\n{\n  private static readonly INSTANCES = new WeakMap();\n\n  private constructor(\n    private readonly _firestore: Firestore,\n    private readonly _userDataWriter: UserDataWriter,\n    readonly _delegate: PublicFirestoreDataConverter<U>\n  ) {}\n\n  fromFirestore(\n    snapshot: ExpQueryDocumentSnapshot,\n    options?: PublicSnapshotOptions\n  ): U {\n    const expSnapshot = new ExpQueryDocumentSnapshot(\n      this._firestore._delegate,\n      this._userDataWriter,\n      snapshot._key,\n      snapshot._document,\n      snapshot.metadata,\n      /* converter= */ null\n    );\n    return this._delegate.fromFirestore(\n      new QueryDocumentSnapshot(this._firestore, expSnapshot),\n      options ?? {}\n    );\n  }\n\n  toFirestore(modelObject: WithFieldValue<U>): PublicDocumentData;\n  toFirestore(\n    modelObject: PartialWithFieldValue<U>,\n    options: PublicSetOptions\n  ): PublicDocumentData;\n  toFirestore(\n    modelObject: WithFieldValue<U> | PartialWithFieldValue<U>,\n    options?: PublicSetOptions\n  ): PublicDocumentData {\n    if (!options) {\n      return this._delegate.toFirestore(modelObject as U);\n    } else {\n      return this._delegate.toFirestore(modelObject as Partial<U>, options);\n    }\n  }\n\n  // Use the same instance of `FirestoreDataConverter` for the given instances\n  // of `Firestore` and `PublicFirestoreDataConverter` so that isEqual() will\n  // compare equal for two objects created with the same converter instance.\n  static getInstance<U>(\n    firestore: Firestore,\n    converter: PublicFirestoreDataConverter<U>\n  ): FirestoreDataConverter<U> {\n    const converterMapByFirestore = FirestoreDataConverter.INSTANCES;\n    let untypedConverterByConverter = converterMapByFirestore.get(firestore);\n    if (!untypedConverterByConverter) {\n      untypedConverterByConverter = new WeakMap();\n      converterMapByFirestore.set(firestore, untypedConverterByConverter);\n    }\n\n    let instance = untypedConverterByConverter.get(converter);\n    if (!instance) {\n      instance = new FirestoreDataConverter(\n        firestore,\n        new UserDataWriter(firestore),\n        converter\n      );\n      untypedConverterByConverter.set(converter, instance);\n    }\n\n    return instance;\n  }\n}\n\n/**\n * A reference to a particular document in a collection in the database.\n */\nexport class DocumentReference<T = PublicDocumentData>\n  implements PublicDocumentReference<T>, Compat<ExpDocumentReference<T>>\n{\n  private _userDataWriter: UserDataWriter;\n\n  constructor(\n    readonly firestore: Firestore,\n    readonly _delegate: ExpDocumentReference<T>\n  ) {\n    this._userDataWriter = new UserDataWriter(firestore);\n  }\n\n  static forPath<U>(\n    path: _ResourcePath,\n    firestore: Firestore,\n    converter: ModularFirestoreDataConverter<U> | null\n  ): DocumentReference<U> {\n    if (path.length % 2 !== 0) {\n      throw new FirestoreError(\n        'invalid-argument',\n        'Invalid document reference. Document ' +\n          'references must have an even number of segments, but ' +\n          `${path.canonicalString()} has ${path.length}`\n      );\n    }\n    return new DocumentReference(\n      firestore,\n      new ExpDocumentReference(\n        firestore._delegate,\n        converter,\n        new _DocumentKey(path)\n      )\n    );\n  }\n\n  static forKey<U>(\n    key: _DocumentKey,\n    firestore: Firestore,\n    converter: ModularFirestoreDataConverter<U> | null\n  ): DocumentReference<U> {\n    return new DocumentReference(\n      firestore,\n      new ExpDocumentReference(firestore._delegate, converter, key)\n    );\n  }\n\n  get id(): string {\n    return this._delegate.id;\n  }\n\n  get parent(): PublicCollectionReference<T> {\n    return new CollectionReference(this.firestore, this._delegate.parent);\n  }\n\n  get path(): string {\n    return this._delegate.path;\n  }\n\n  collection(\n    pathString: string\n  ): PublicCollectionReference<PublicDocumentData> {\n    try {\n      return new CollectionReference(\n        this.firestore,\n        collection(this._delegate, pathString)\n      );\n    } catch (e) {\n      throw replaceFunctionName(\n        e as Error,\n        'collection()',\n        'DocumentReference.collection()'\n      );\n    }\n  }\n\n  isEqual(other: PublicDocumentReference<T>): boolean {\n    other = getModularInstance<PublicDocumentReference<T>>(other);\n\n    if (!(other instanceof ExpDocumentReference)) {\n      return false;\n    }\n    return refEqual(this._delegate, other);\n  }\n\n  set(value: Partial<T>, options: PublicSetOptions): Promise<void>;\n  set(value: T): Promise<void>;\n  set(value: T | Partial<T>, options?: PublicSetOptions): Promise<void> {\n    options = validateSetOptions('DocumentReference.set', options);\n    try {\n      if (options) {\n        return setDoc(\n          this._delegate,\n          value as PartialWithFieldValue<T>,\n          options\n        );\n      } else {\n        return setDoc(this._delegate, value as WithFieldValue<T>);\n      }\n    } catch (e) {\n      throw replaceFunctionName(\n        e as Error,\n        'setDoc()',\n        'DocumentReference.set()'\n      );\n    }\n  }\n\n  update(value: PublicUpdateData): Promise<void>;\n  update(\n    field: string | PublicFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Promise<void>;\n  update(\n    fieldOrUpdateData: string | PublicFieldPath | PublicUpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Promise<void> {\n    try {\n      if (arguments.length === 1) {\n        return updateDoc(this._delegate, fieldOrUpdateData as PublicUpdateData);\n      } else {\n        return updateDoc(\n          this._delegate,\n          fieldOrUpdateData as string | ExpFieldPath,\n          value,\n          ...moreFieldsAndValues\n        );\n      }\n    } catch (e) {\n      throw replaceFunctionName(\n        e as Error,\n        'updateDoc()',\n        'DocumentReference.update()'\n      );\n    }\n  }\n\n  delete(): Promise<void> {\n    return deleteDoc(this._delegate);\n  }\n\n  onSnapshot(observer: PartialObserver<PublicDocumentSnapshot<T>>): Unsubscribe;\n  onSnapshot(\n    options: PublicSnapshotListenOptions,\n    observer: PartialObserver<PublicDocumentSnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    onNext: NextFn<PublicDocumentSnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n  onSnapshot(\n    options: PublicSnapshotListenOptions,\n    onNext: NextFn<PublicDocumentSnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n\n  onSnapshot(...args: unknown[]): Unsubscribe {\n    const options = extractSnapshotOptions(args);\n    const observer = wrapObserver<DocumentSnapshot<T>, ExpDocumentSnapshot<T>>(\n      args,\n      result =>\n        new DocumentSnapshot(\n          this.firestore,\n          new ExpDocumentSnapshot(\n            this.firestore._delegate,\n            this._userDataWriter,\n            result._key,\n            result._document,\n            result.metadata,\n            this._delegate.converter\n          )\n        )\n    );\n    return onSnapshot(this._delegate, options, observer);\n  }\n\n  get(options?: PublicGetOptions): Promise<PublicDocumentSnapshot<T>> {\n    let snap: Promise<ExpDocumentSnapshot<T>>;\n    if (options?.source === 'cache') {\n      snap = getDocFromCache(this._delegate);\n    } else if (options?.source === 'server') {\n      snap = getDocFromServer(this._delegate);\n    } else {\n      snap = getDoc(this._delegate);\n    }\n\n    return snap.then(\n      result =>\n        new DocumentSnapshot(\n          this.firestore,\n          new ExpDocumentSnapshot(\n            this.firestore._delegate,\n            this._userDataWriter,\n            result._key,\n            result._document,\n            result.metadata,\n            this._delegate.converter\n          )\n        )\n    );\n  }\n\n  withConverter(converter: null): PublicDocumentReference<PublicDocumentData>;\n  withConverter<U>(\n    converter: PublicFirestoreDataConverter<U>\n  ): PublicDocumentReference<U>;\n  withConverter<U>(\n    converter: PublicFirestoreDataConverter<U> | null\n  ): PublicDocumentReference<U> {\n    return new DocumentReference<U>(\n      this.firestore,\n      converter\n        ? this._delegate.withConverter(\n            FirestoreDataConverter.getInstance(this.firestore, converter)\n          )\n        : (this._delegate.withConverter(null) as ExpDocumentReference<U>)\n    );\n  }\n}\n\n/**\n * Replaces the function name in an error thrown by the firestore-exp API\n * with the function names used in the classic API.\n */\nfunction replaceFunctionName(\n  e: Error,\n  original: string | RegExp,\n  updated: string\n): Error {\n  e.message = e.message.replace(original, updated);\n  return e;\n}\n\n/**\n * Iterates the list of arguments from an `onSnapshot` call and returns the\n * first argument that may be an `SnapshotListenOptions` object. Returns an\n * empty object if none is found.\n */\nexport function extractSnapshotOptions(\n  args: unknown[]\n): PublicSnapshotListenOptions {\n  for (const arg of args) {\n    if (typeof arg === 'object' && !isPartialObserver(arg)) {\n      return arg as PublicSnapshotListenOptions;\n    }\n  }\n  return {};\n}\n\n/**\n * Creates an observer that can be passed to the firestore-exp SDK. The\n * observer converts all observed values into the format expected by the classic\n * SDK.\n *\n * @param args - The list of arguments from an `onSnapshot` call.\n * @param wrapper - The function that converts the firestore-exp type into the\n * type used by this shim.\n */\nexport function wrapObserver<CompatType, ExpType>(\n  args: unknown[],\n  wrapper: (val: ExpType) => CompatType\n): PartialObserver<ExpType> {\n  let userObserver: PartialObserver<CompatType>;\n  if (isPartialObserver(args[0])) {\n    userObserver = args[0] as PartialObserver<CompatType>;\n  } else if (isPartialObserver(args[1])) {\n    userObserver = args[1];\n  } else if (typeof args[0] === 'function') {\n    userObserver = {\n      next: args[0] as NextFn<CompatType> | undefined,\n      error: args[1] as ErrorFn | undefined,\n      complete: args[2] as CompleteFn | undefined\n    };\n  } else {\n    userObserver = {\n      next: args[1] as NextFn<CompatType> | undefined,\n      error: args[2] as ErrorFn | undefined,\n      complete: args[3] as CompleteFn | undefined\n    };\n  }\n\n  return {\n    next: val => {\n      if (userObserver!.next) {\n        userObserver!.next(wrapper(val));\n      }\n    },\n    error: userObserver.error?.bind(userObserver),\n    complete: userObserver.complete?.bind(userObserver)\n  };\n}\n\n/**\n * Options interface that can be provided to configure the deserialization of\n * DocumentSnapshots.\n */\nexport interface SnapshotOptions extends PublicSnapshotOptions {}\n\nexport class DocumentSnapshot<T = PublicDocumentData>\n  implements PublicDocumentSnapshot<T>, Compat<ExpDocumentSnapshot<T>>\n{\n  constructor(\n    private readonly _firestore: Firestore,\n    readonly _delegate: ExpDocumentSnapshot<T>\n  ) {}\n\n  get ref(): DocumentReference<T> {\n    return new DocumentReference<T>(this._firestore, this._delegate.ref);\n  }\n\n  get id(): string {\n    return this._delegate.id;\n  }\n\n  get metadata(): SnapshotMetadata {\n    return this._delegate.metadata;\n  }\n\n  get exists(): boolean {\n    return this._delegate.exists();\n  }\n\n  data(options?: PublicSnapshotOptions): T | undefined {\n    return this._delegate.data(options);\n  }\n\n  get(\n    fieldPath: string | PublicFieldPath,\n    options?: PublicSnapshotOptions\n    // We are using `any` here to avoid an explicit cast by our users.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): any {\n    return this._delegate.get(fieldPath as string | ExpFieldPath, options);\n  }\n\n  isEqual(other: DocumentSnapshot<T>): boolean {\n    return snapshotEqual(this._delegate, other._delegate);\n  }\n}\n\nexport class QueryDocumentSnapshot<T = PublicDocumentData>\n  extends DocumentSnapshot<T>\n  implements PublicQueryDocumentSnapshot<T>\n{\n  data(options?: PublicSnapshotOptions): T {\n    const data = this._delegate.data(options);\n    _debugAssert(\n      data !== undefined,\n      'Document in a QueryDocumentSnapshot should exist'\n    );\n    return data;\n  }\n}\n\nexport class Query<T = PublicDocumentData>\n  implements PublicQuery<T>, Compat<ExpQuery<T>>\n{\n  private readonly _userDataWriter: UserDataWriter;\n\n  constructor(readonly firestore: Firestore, readonly _delegate: ExpQuery<T>) {\n    this._userDataWriter = new UserDataWriter(firestore);\n  }\n\n  where(\n    fieldPath: string | _FieldPath,\n    opStr: PublicWhereFilterOp,\n    value: unknown\n  ): Query<T> {\n    try {\n      // The \"as string\" cast is a little bit of a hack. `where` accepts the\n      // FieldPath Compat type as input, but is not typed as such in order to\n      // not expose this via our public typings file.\n      return new Query<T>(\n        this.firestore,\n        query(this._delegate, where(fieldPath as string, opStr, value))\n      );\n    } catch (e) {\n      throw replaceFunctionName(\n        e as Error,\n        /(orderBy|where)\\(\\)/,\n        'Query.$1()'\n      );\n    }\n  }\n\n  orderBy(\n    fieldPath: string | _FieldPath,\n    directionStr?: PublicOrderByDirection\n  ): Query<T> {\n    try {\n      // The \"as string\" cast is a little bit of a hack. `orderBy` accepts the\n      // FieldPath Compat type as input, but is not typed as such in order to\n      // not expose this via our public typings file.\n      return new Query<T>(\n        this.firestore,\n        query(this._delegate, orderBy(fieldPath as string, directionStr))\n      );\n    } catch (e) {\n      throw replaceFunctionName(\n        e as Error,\n        /(orderBy|where)\\(\\)/,\n        'Query.$1()'\n      );\n    }\n  }\n\n  limit(n: number): Query<T> {\n    try {\n      return new Query<T>(this.firestore, query(this._delegate, limit(n)));\n    } catch (e) {\n      throw replaceFunctionName(e as Error, 'limit()', 'Query.limit()');\n    }\n  }\n\n  limitToLast(n: number): Query<T> {\n    try {\n      return new Query<T>(\n        this.firestore,\n        query(this._delegate, limitToLast(n))\n      );\n    } catch (e) {\n      throw replaceFunctionName(\n        e as Error,\n        'limitToLast()',\n        'Query.limitToLast()'\n      );\n    }\n  }\n\n  startAt(...args: any[]): Query<T> {\n    try {\n      return new Query(this.firestore, query(this._delegate, startAt(...args)));\n    } catch (e) {\n      throw replaceFunctionName(e as Error, 'startAt()', 'Query.startAt()');\n    }\n  }\n\n  startAfter(...args: any[]): Query<T> {\n    try {\n      return new Query(\n        this.firestore,\n        query(this._delegate, startAfter(...args))\n      );\n    } catch (e) {\n      throw replaceFunctionName(\n        e as Error,\n        'startAfter()',\n        'Query.startAfter()'\n      );\n    }\n  }\n\n  endBefore(...args: any[]): Query<T> {\n    try {\n      return new Query(\n        this.firestore,\n        query(this._delegate, endBefore(...args))\n      );\n    } catch (e) {\n      throw replaceFunctionName(e as Error, 'endBefore()', 'Query.endBefore()');\n    }\n  }\n\n  endAt(...args: any[]): Query<T> {\n    try {\n      return new Query(this.firestore, query(this._delegate, endAt(...args)));\n    } catch (e) {\n      throw replaceFunctionName(e as Error, 'endAt()', 'Query.endAt()');\n    }\n  }\n\n  isEqual(other: PublicQuery<T>): boolean {\n    return queryEqual(this._delegate, (other as Query<T>)._delegate);\n  }\n\n  get(options?: PublicGetOptions): Promise<QuerySnapshot<T>> {\n    let query: Promise<ExpQuerySnapshot<T>>;\n    if (options?.source === 'cache') {\n      query = getDocsFromCache(this._delegate);\n    } else if (options?.source === 'server') {\n      query = getDocsFromServer(this._delegate);\n    } else {\n      query = getDocs(this._delegate);\n    }\n    return query.then(\n      result =>\n        new QuerySnapshot(\n          this.firestore,\n          new ExpQuerySnapshot<T>(\n            this.firestore._delegate,\n            this._userDataWriter,\n            this._delegate,\n            result._snapshot\n          )\n        )\n    );\n  }\n\n  onSnapshot(observer: PartialObserver<PublicQuerySnapshot<T>>): Unsubscribe;\n  onSnapshot(\n    options: PublicSnapshotListenOptions,\n    observer: PartialObserver<PublicQuerySnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    onNext: NextFn<PublicQuerySnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n  onSnapshot(\n    options: PublicSnapshotListenOptions,\n    onNext: NextFn<PublicQuerySnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n\n  onSnapshot(...args: unknown[]): Unsubscribe {\n    const options = extractSnapshotOptions(args);\n    const observer = wrapObserver<QuerySnapshot<T>, ExpQuerySnapshot<T>>(\n      args,\n      snap =>\n        new QuerySnapshot(\n          this.firestore,\n          new ExpQuerySnapshot<T>(\n            this.firestore._delegate,\n            this._userDataWriter,\n            this._delegate,\n            snap._snapshot\n          )\n        )\n    );\n    return onSnapshot(this._delegate, options, observer);\n  }\n\n  withConverter(converter: null): Query<PublicDocumentData>;\n  withConverter<U>(converter: PublicFirestoreDataConverter<U>): Query<U>;\n  withConverter<U>(\n    converter: PublicFirestoreDataConverter<U> | null\n  ): Query<U> {\n    return new Query<U>(\n      this.firestore,\n      converter\n        ? this._delegate.withConverter(\n            FirestoreDataConverter.getInstance(this.firestore, converter)\n          )\n        : (this._delegate.withConverter(null) as ExpQuery<U>)\n    );\n  }\n}\n\nexport class DocumentChange<T = PublicDocumentData>\n  implements PublicDocumentChange<T>, Compat<ExpDocumentChange<T>>\n{\n  constructor(\n    private readonly _firestore: Firestore,\n    readonly _delegate: ExpDocumentChange<T>\n  ) {}\n\n  get type(): PublicDocumentChangeType {\n    return this._delegate.type;\n  }\n\n  get doc(): QueryDocumentSnapshot<T> {\n    return new QueryDocumentSnapshot<T>(this._firestore, this._delegate.doc);\n  }\n\n  get oldIndex(): number {\n    return this._delegate.oldIndex;\n  }\n\n  get newIndex(): number {\n    return this._delegate.newIndex;\n  }\n}\n\nexport class QuerySnapshot<T = PublicDocumentData>\n  implements PublicQuerySnapshot<T>, Compat<ExpQuerySnapshot<T>>\n{\n  constructor(\n    readonly _firestore: Firestore,\n    readonly _delegate: ExpQuerySnapshot<T>\n  ) {}\n\n  get query(): Query<T> {\n    return new Query(this._firestore, this._delegate.query);\n  }\n\n  get metadata(): SnapshotMetadata {\n    return this._delegate.metadata;\n  }\n\n  get size(): number {\n    return this._delegate.size;\n  }\n\n  get empty(): boolean {\n    return this._delegate.empty;\n  }\n\n  get docs(): Array<QueryDocumentSnapshot<T>> {\n    return this._delegate.docs.map(\n      doc => new QueryDocumentSnapshot<T>(this._firestore, doc)\n    );\n  }\n\n  docChanges(\n    options?: PublicSnapshotListenOptions\n  ): Array<PublicDocumentChange<T>> {\n    return this._delegate\n      .docChanges(options)\n      .map(docChange => new DocumentChange<T>(this._firestore, docChange));\n  }\n\n  forEach(\n    callback: (result: QueryDocumentSnapshot<T>) => void,\n    thisArg?: unknown\n  ): void {\n    this._delegate.forEach(snapshot => {\n      callback.call(\n        thisArg,\n        new QueryDocumentSnapshot(this._firestore, snapshot)\n      );\n    });\n  }\n\n  isEqual(other: QuerySnapshot<T>): boolean {\n    return snapshotEqual(this._delegate, other._delegate);\n  }\n}\n\nexport class CollectionReference<T = PublicDocumentData>\n  extends Query<T>\n  implements PublicCollectionReference<T>\n{\n  constructor(\n    readonly firestore: Firestore,\n    readonly _delegate: ExpCollectionReference<T>\n  ) {\n    super(firestore, _delegate);\n  }\n\n  get id(): string {\n    return this._delegate.id;\n  }\n\n  get path(): string {\n    return this._delegate.path;\n  }\n\n  get parent(): DocumentReference<PublicDocumentData> | null {\n    const docRef = this._delegate.parent;\n    return docRef ? new DocumentReference(this.firestore, docRef) : null;\n  }\n\n  doc(documentPath?: string): DocumentReference<T> {\n    try {\n      if (documentPath === undefined) {\n        // Call `doc` without `documentPath` if `documentPath` is `undefined`\n        // as `doc` validates the number of arguments to prevent users from\n        // accidentally passing `undefined`.\n        return new DocumentReference(this.firestore, doc(this._delegate));\n      } else {\n        return new DocumentReference(\n          this.firestore,\n          doc(this._delegate, documentPath)\n        );\n      }\n    } catch (e) {\n      throw replaceFunctionName(\n        e as Error,\n        'doc()',\n        'CollectionReference.doc()'\n      );\n    }\n  }\n\n  add(data: T): Promise<DocumentReference<T>> {\n    return addDoc(this._delegate, data as WithFieldValue<T>).then(\n      docRef => new DocumentReference(this.firestore, docRef)\n    );\n  }\n\n  isEqual(other: CollectionReference<T>): boolean {\n    return refEqual(this._delegate, other._delegate);\n  }\n\n  withConverter(converter: null): CollectionReference<PublicDocumentData>;\n  withConverter<U>(\n    converter: PublicFirestoreDataConverter<U>\n  ): CollectionReference<U>;\n  withConverter<U>(\n    converter: PublicFirestoreDataConverter<U> | null\n  ): CollectionReference<U> {\n    return new CollectionReference<U>(\n      this.firestore,\n      converter\n        ? this._delegate.withConverter(\n            FirestoreDataConverter.getInstance(this.firestore, converter)\n          )\n        : (this._delegate.withConverter(null) as ExpCollectionReference<U>)\n    );\n  }\n}\n\nfunction castReference<T>(\n  documentRef: PublicDocumentReference<T>\n): ExpDocumentReference<T> {\n  return _cast<ExpDocumentReference<T>>(documentRef, ExpDocumentReference);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FieldPath as ExpFieldPath,\n  _FieldPath as InternalFieldPath\n} from '@firebase/firestore';\nimport { FieldPath as PublicFieldPath } from '@firebase/firestore-types';\nimport { Compat, getModularInstance } from '@firebase/util';\n\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n\n/**\n * A `FieldPath` refers to a field in a document. The path may consist of a\n * single field name (referring to a top-level field in the document), or a list\n * of field names (referring to a nested field in the document).\n */\nexport class FieldPath implements PublicFieldPath, Compat<ExpFieldPath> {\n  readonly _delegate: ExpFieldPath;\n  /**\n   * Creates a FieldPath from the provided field names. If more than one field\n   * name is provided, the path will point to a nested field in a document.\n   *\n   * @param fieldNames - A list of field names.\n   */\n  constructor(...fieldNames: string[]) {\n    this._delegate = new ExpFieldPath(...fieldNames);\n  }\n\n  static documentId(): FieldPath {\n    /**\n     * Internal Note: The backend doesn't technically support querying by\n     * document ID. Instead it queries by the entire document name (full path\n     * included), but in the cases we currently support documentId(), the net\n     * effect is the same.\n     */\n    return new FieldPath(InternalFieldPath.keyField().canonicalString());\n  }\n\n  isEqual(other: PublicFieldPath): boolean {\n    other = getModularInstance(other);\n\n    if (!(other instanceof ExpFieldPath)) {\n      return false;\n    }\n    return this._delegate._internalPath.isEqual(other._internalPath);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  arrayRemove,\n  arrayUnion,\n  deleteField,\n  FieldValue as FieldValue1,\n  increment,\n  serverTimestamp\n} from '@firebase/firestore';\nimport { FieldValue as PublicFieldValue } from '@firebase/firestore-types';\nimport { Compat } from '@firebase/util';\n\nexport class FieldValue implements PublicFieldValue, Compat<FieldValue1> {\n  static serverTimestamp(): FieldValue {\n    const delegate = serverTimestamp();\n    delegate._methodName = 'FieldValue.serverTimestamp';\n    return new FieldValue(delegate);\n  }\n\n  static delete(): FieldValue {\n    const delegate = deleteField();\n    delegate._methodName = 'FieldValue.delete';\n    return new FieldValue(delegate);\n  }\n\n  static arrayUnion(...elements: unknown[]): FieldValue {\n    const delegate = arrayUnion(...elements);\n    delegate._methodName = 'FieldValue.arrayUnion';\n    return new FieldValue(delegate);\n  }\n\n  static arrayRemove(...elements: unknown[]): FieldValue {\n    const delegate = arrayRemove(...elements);\n    delegate._methodName = 'FieldValue.arrayRemove';\n    return new FieldValue(delegate);\n  }\n\n  static increment(n: number): FieldValue {\n    const delegate = increment(n);\n    delegate._methodName = 'FieldValue.increment';\n    return new FieldValue(delegate);\n  }\n\n  constructor(readonly _delegate: FieldValue1) {}\n\n  isEqual(other: FieldValue): boolean {\n    return this._delegate.isEqual(other._delegate);\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FirebaseApp } from '@firebase/app-compat';\nimport { FirebaseNamespace } from '@firebase/app-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { Component, ComponentType } from '@firebase/component';\nimport {\n  Firestore as ModularFirestore,\n  CACHE_SIZE_UNLIMITED,\n  GeoPoint,\n  Timestamp\n} from '@firebase/firestore';\n\nimport { Blob } from './api/blob';\nimport {\n  Firestore,\n  Transaction,\n  CollectionReference,\n  DocumentReference,\n  DocumentSnapshot,\n  Query,\n  QueryDocumentSnapshot,\n  QuerySnapshot,\n  WriteBatch,\n  setLogLevel\n} from './api/database';\nimport { FieldPath } from './api/field_path';\nimport { FieldValue } from './api/field_value';\n\nconst firestoreNamespace = {\n  Firestore,\n  GeoPoint,\n  Timestamp,\n  Blob,\n  Transaction,\n  WriteBatch,\n  DocumentReference,\n  DocumentSnapshot,\n  Query,\n  QueryDocumentSnapshot,\n  QuerySnapshot,\n  CollectionReference,\n  FieldPath,\n  FieldValue,\n  setLogLevel,\n  CACHE_SIZE_UNLIMITED\n};\n\n/**\n * Configures Firestore as part of the Firebase SDK by calling registerComponent.\n *\n * @param firebase - The FirebaseNamespace to register Firestore with\n * @param firestoreFactory - A factory function that returns a new Firestore\n *    instance.\n */\nexport function configureForFirebase(\n  firebase: FirebaseNamespace,\n  firestoreFactory: (\n    app: FirebaseApp,\n    firestoreExp: ModularFirestore\n  ) => Firestore\n): void {\n  (firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'firestore-compat',\n      container => {\n        const app = container.getProvider('app-compat').getImmediate()!;\n        const firestoreExp = container.getProvider('firestore').getImmediate()!;\n        return firestoreFactory(app, firestoreExp);\n      },\n      'PUBLIC' as ComponentType.PUBLIC\n    ).setServiceProps({ ...firestoreNamespace })\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport firebase from '@firebase/app-compat';\nimport type { FirebaseNamespace } from '@firebase/app-types';\nimport * as types from '@firebase/firestore-types';\n\nimport { name, version } from '../package.json';\n\nimport { Firestore, IndexedDbPersistenceProvider } from './api/database';\nimport { configureForFirebase } from './config';\n\nimport './register-module';\n\n/**\n * Registers the main Firestore build with the components framework.\n * Persistence can be enabled via `firebase.firestore().enablePersistence()`.\n */\nexport function registerFirestore(instance: FirebaseNamespace): void {\n  configureForFirebase(\n    instance,\n    (app, firestoreExp) =>\n      new Firestore(app, firestoreExp, new IndexedDbPersistenceProvider())\n  );\n  instance.registerVersion(name, version);\n}\n\nregisterFirestore(firebase as unknown as FirebaseNamespace);\n\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    firestore: {\n      (app?: FirebaseApp): types.FirebaseFirestore;\n      Blob: typeof types.Blob;\n      CollectionReference: typeof types.CollectionReference;\n      DocumentReference: typeof types.DocumentReference;\n      DocumentSnapshot: typeof types.DocumentSnapshot;\n      FieldPath: typeof types.FieldPath;\n      FieldValue: typeof types.FieldValue;\n      Firestore: typeof types.FirebaseFirestore;\n      GeoPoint: typeof types.GeoPoint;\n      Query: typeof types.Query;\n      QueryDocumentSnapshot: typeof types.QueryDocumentSnapshot;\n      QuerySnapshot: typeof types.QuerySnapshot;\n      Timestamp: typeof types.Timestamp;\n      Transaction: typeof types.Transaction;\n      WriteBatch: typeof types.WriteBatch;\n      setLogLevel: typeof types.setLogLevel;\n    };\n  }\n  interface FirebaseApp {\n    firestore?(): types.FirebaseFirestore;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}